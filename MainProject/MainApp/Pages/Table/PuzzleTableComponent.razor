@using PuzzleTableHelperCore;


@if (_puzzleTable != null)
{
<div style="display: flex;">
    <div>
    <PuzzleConnectionTableComponent Service="_service"
                                    TableService="TableService"
                                    Table="_puzzleTable"
                                    Targets="_targets"
                                    SuggestionSet="_testSet"
                                    OnAddTarget="@(e => AddTarget(e.Row, e.Column))"
                                    OnRemoveTarget="@(e => RemoveTarget(e.Row, e.Column))"
                                    OnRangeChanged="@(x => RangeChanged(x.RowRange, x.ColumnRange))"
                                    />
    </div>
    <div>
    <PuzzleTableRecommendationComponent
        Table="_puzzleTable"
        TableService="TableService"
        PuzzleTableService="_service"
        TargetRange="_targetRange"
        OnSelect="@(x => SelectRecommended(x))"
        />
    </div>
</div>

    <MudInput T="int" @bind-Value="targetLimit" />
    <MudButton OnClick="(() => GetSuggestionSets())">계산</MudButton>
    <MudButton OnClick="(() => GetSuggestionSets(5))">계산5</MudButton>
    <MudButton OnClick="(() => GetSuggestionSets(10))">계산10</MudButton>
    <MudButton OnClick="(() => GetSuggestionSets(20))">계산20</MudButton>
    <MudButton OnClick="(() => GetSuggestionSets(40))">계산40</MudButton>

    <table class="suggestion-table">
        <tr>
            <td></td>
            @foreach (var target in _targets.OrderBy(t => t.Row).ThenBy(t => t.Column))
            {
                var targetText = $"{target.Row},{target.Column}";
                <td>(@targetText)</td>
            }
            <td></td>
        </tr>
        @foreach (var (suggestionSet, index) in _suggestionSets.Select((s, i) => (s, i)))
        {
            <tr>
                <td>@index</td>
                @foreach (var target in _targets.OrderBy(t => t.Row).ThenBy(t => t.Column))
                {
                    var cell = suggestionSet.Cells.FirstOrDefault(c => c.Row == target.Row && c.Column == target.Column);
                    <td>
                        @if (cell is not null)
                        {
                            <div>
                                <span>@cell.PieceNumber</span>
                                <MudIconButton Icon="@Icons.Material.Filled.BookmarkAdd" OnClick="(() => HintYes(target.Row, target.Column, cell.PieceNumber))" Size="Size.Small" />
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="(() => HintNo(target.Row, target.Column, cell.PieceNumber))" Size="Size.Small" />
                            </div>
                        }
                    </td>
                }
                <td>
                    <MudButton OnClick="(() => SelectSuggestionSet(suggestionSet))">선택</MudButton>
                    @if (_testSet == suggestionSet)
                    {
                        <MudButton OnClick="(() => CancelSuggestionSet(suggestionSet))">취소</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="(() => TestSuggestionSet(suggestionSet))">넣어보기</MudButton>
                    }
                </td>
            </tr>
        }
        <tr></tr>
    </table>

}