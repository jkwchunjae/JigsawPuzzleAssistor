@page "/puzzle-table"
@using PuzzleTableHelperCore;

<PageTitle>Puzzle Table</PageTitle>

@if (_puzzleTable != null)
{
<table class="puzzle-table">
    <tr>
        <td></td>
        @for (int column = 0; column < _puzzleTable.ColumnCount + 1; column++)
        {
            <td class="header">
                <div>
                    <span>@column</span>
                </div>
            </td>
        }
    </tr>
    @for (int rowIndex = 0; rowIndex < _puzzleTable.RowCount + 1; rowIndex++)
    {
        var row = rowIndex;
        <tr>
            <td class="header">
                <div>
                    <span>@row</span>
                </div>
            </td>
            @for (int columnIndex = 0; columnIndex < _puzzleTable.ColumnCount + 1; columnIndex++)
            {
                var column = columnIndex;
                PuzzleCell? cell = _puzzleTable.GetCell(row, column);
                if (cell is null)
                {
                    <td class="cell">
                        <div>
                            @if (IsTarget(row, column))
                            {
                                <button @onclick="@(e => RemoveTarget(row, column))">-</button>
                            }
                            else
                            {
                                <button @onclick="@(e => AddTarget(row, column))">+</button>
                            }
                        </div>
                    </td>
                }
                else
                {
                    <td class="cell">
                        <div>
                            <span>
                            @cell!.PieceNumber
                            </span>
                        </div>
                    </td>
                }
            }
        </tr>
    }
</table>

<MudInput T="int" @bind-Value="targetLimit" />
<MudButton OnClick="(() => GetSuggestionSets())">Calc</MudButton>

<table class="suggestion-table">
    <tr>
        <td>Index</td>
        @foreach (var target in _targets.OrderBy(t => t.Row).ThenBy(t => t.Column))
        {
            var targetText = $"{target.Row},{target.Column}";
            <td>(@targetText)</td>
        }
        <td></td>
    </tr>
    @foreach (var (suggestionSet, index) in _suggestionSets.Select((s, i) => (s, i)))
    {
        <tr>
            <td>@index</td>
            @foreach (var target in _targets.OrderBy(t => t.Row).ThenBy(t => t.Column))
            {
                var cell = suggestionSet.Cells.FirstOrDefault(c => c.Row == target.Row && c.Column == target.Column);
                <td>
                    @if (cell is not null)
                    {
                    <span>@cell.PieceNumber</span>
                    }
                </td>
            }
            <td>
                <MudButton OnClick="(() => SelectSuggestionSet(suggestionSet))">Select</MudButton>
            </td>
        </tr>
    }
    <tr></tr>
</table>
}